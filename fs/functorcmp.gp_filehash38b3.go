///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Wed Nov 02 2016 21:39:16]
// Generate from:
//   [github.com/vipally/gx/fs/tree.gp_filehash38b3.go]
//   [github.com/vipally/gx/fs/tree.gpg] [tree_filehash]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : [Oct 24 2016 20:25:45]
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////



//this file is used to import by other gp files
//it cannot use independently, simulation C++ stl functors
<PACKAGE>

//#GOGP_ONCE
const (
	CMPLesser = iota //default
	CMPGreater
) //
//#GOGP_ONCE_END

//cmp object, zero is Lesser
type Cmp<GLOBAL_NAME_PART> byte

const (
	Cmp<GLOBAL_NAME_PART>Lesser  Cmp<GLOBAL_NAME_PART> = CMPLesser
	Cmp<GLOBAL_NAME_PART>Greater Cmp<GLOBAL_NAME_PART> = CMPGreater
)

//create cmp object by name
func CreateCmp<GLOBAL_NAME_PART>(cmpName string) (r Cmp<GLOBAL_NAME_PART>) {
	r = Cmp<GLOBAL_NAME_PART>Lesser.CreateByName(cmpName)
	return
}

//uniformed global function
func (me Cmp<GLOBAL_NAME_PART>) F(left, right <VALUE_TYPE>) (ok bool) {
	switch me {
	case CMPLesser:
		ok = me.less(left, right)
	case CMPGreater:
		ok = me.great(left, right)
	}
	return
}

//Lesser object
func (me Cmp<GLOBAL_NAME_PART>) Lesser() Cmp<GLOBAL_NAME_PART> { return CMPLesser }

//Greater object
func (me Cmp<GLOBAL_NAME_PART>) Greater() Cmp<GLOBAL_NAME_PART> { return CMPGreater }

//show as string
func (me Cmp<GLOBAL_NAME_PART>) String() (s string) {
	switch me {
	case CMPLesser:
		s = "Lesser"
	case CMPGreater:
		s = "Greater"
	default:
		s = "error cmp value"
	}
	return
}

//create by bool
func (me Cmp<GLOBAL_NAME_PART>) CreateByBool(bigFirst bool) (r Cmp<GLOBAL_NAME_PART>) {
	if bigFirst {
		r = CMPGreater
	} else {
		r = CMPLesser
	}
	return
}

//create cmp object by name
func (me Cmp<GLOBAL_NAME_PART>) CreateByName(cmpName string) (r Cmp<GLOBAL_NAME_PART>) {
	switch cmpName {
	case "": //default Lesser
		fallthrough
	case "Lesser":
		r = CMPLesser
	case "Greater":
		r = CMPGreater
	default: //unsupport name
		panic(cmpName)
	}
	return
}

//lesser operation
func (me Cmp<GLOBAL_NAME_PART>) less(left, right <VALUE_TYPE>) (ok bool) {

	ok = left.Less(right)

	return
}

//Greater operation
func (me Cmp<GLOBAL_NAME_PART>) great(left, right <VALUE_TYPE>) (ok bool) {

	ok = right.Less(left)

	return
}

