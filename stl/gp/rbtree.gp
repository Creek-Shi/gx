//#GOGP_IGNORE_BEGIN
///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Sun Nov 27 2016 22:16:08]
// Generate from:
//   [github.com/vipally/gx/stl/gp/rbtree.gp.go]
//   [github.com/vipally/gx/stl/gp/gp.gpg] [GOGP_REVERSE_rbtree]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : [Oct 24 2016 20:25:45]
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////
//#GOGP_IGNORE_END

//rb-tree

<PACKAGE>

//#GOGP_REQUIRE(github.com/vipally/gogp/lib/fakedef,_)

//#GOGP_REQUIRE(github.com/vipally/gx/stl/gp/functorcmp)

////////////////////////////////////////////////////////////////////////////////

var g<GLOBAL_NAME_PREFIX>RBTreeGbl struct {
	cmp Cmp<GLOBAL_NAME_PREFIX>
}

func init() {
	g<GLOBAL_NAME_PREFIX>RBTreeGbl.cmp = g<GLOBAL_NAME_PREFIX>RBTreeGbl.cmp.CreateByName("#GOGP_GPGCFG(GOGP_DefaultCmpType)")
}

//#GOGP_ONCE
type ColorType int8

const (
	RED ColorType = iota //default
	BLACK
) //
//#GOGP_END_ONCE

type <GLOBAL_NAME_PREFIX>RBTree struct {
	root *<GLOBAL_NAME_PREFIX>RBTreeNode
	size int
	cmp  Cmp<GLOBAL_NAME_PREFIX>
}

type <GLOBAL_NAME_PREFIX>RBTreeNodeData struct {
	key <KEY_TYPE>
	//#GOGP_IFDEF VALUE_TYPE
	val <VALUE_TYPE>
	//#GOGP_ENDIF
}

func (this *<GLOBAL_NAME_PREFIX>RBTreeNodeData) Key() <KEY_TYPE> {
	return this.key
}

//#GOGP_IFDEF VALUE_TYPE
func (this *<GLOBAL_NAME_PREFIX>RBTreeNodeData) Value() <VALUE_TYPE> {
	return this.val
} //
//#GOGP_ENDIF

//tree node
type <GLOBAL_NAME_PREFIX>RBTreeNode struct {
	val                 <GLOBAL_NAME_PREFIX>RBTreeNodeData
	left, right, parent *<GLOBAL_NAME_PREFIX>RBTreeNode
	color               ColorType
}

func (this *<GLOBAL_NAME_PREFIX>RBTree) Root() *<GLOBAL_NAME_PREFIX>RBTreeNode { return this.root }

func (this *<GLOBAL_NAME_PREFIX>RBTreeNode) Get() *<GLOBAL_NAME_PREFIX>RBTreeNodeData {
	return &this.val
}

type <GLOBAL_NAME_PREFIX>RBTreeNodeVisitor struct {
	node, root *<GLOBAL_NAME_PREFIX>RBTreeNode
}

func (this *<GLOBAL_NAME_PREFIX>RBTreeNodeVisitor) Next() bool {
	return false
}
func (this *<GLOBAL_NAME_PREFIX>RBTreeNodeVisitor) Prev() bool {
	return false
}
func (this *<GLOBAL_NAME_PREFIX>RBTreeNodeVisitor) Node() *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}

func (this *<GLOBAL_NAME_PREFIX>RBTreeNode) rotateLeft(root **<GLOBAL_NAME_PREFIX>RBTreeNode) {
}
func (this *<GLOBAL_NAME_PREFIX>RBTreeNode) rotateRight(root **<GLOBAL_NAME_PREFIX>RBTreeNode) {
}

//new object
func New<GLOBAL_NAME_PREFIX>RBTree() *<GLOBAL_NAME_PREFIX>RBTree {
	return &<GLOBAL_NAME_PREFIX>RBTree{}
}

func (this *<GLOBAL_NAME_PREFIX>RBTree) insertUnique(d <GLOBAL_NAME_PREFIX>RBTreeNodeData) *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) insertEqual(d <GLOBAL_NAME_PREFIX>RBTreeNodeData) *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}

func (this *<GLOBAL_NAME_PREFIX>RBTree) Size() int {
	return 0
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) Visitor(node *<GLOBAL_NAME_PREFIX>RBTreeNode) *<GLOBAL_NAME_PREFIX>RBTreeNodeVisitor {
	return nil
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) Begin() *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) End() *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) Clear() *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) Insert(d <GLOBAL_NAME_PREFIX>RBTreeNodeData) *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) Remove(d <GLOBAL_NAME_PREFIX>RBTreeNodeData) *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) Erase(n *<GLOBAL_NAME_PREFIX>RBTreeNode) *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) LowerBound(d <GLOBAL_NAME_PREFIX>RBTreeNodeData) *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) UpperBound(d <GLOBAL_NAME_PREFIX>RBTreeNodeData) *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}
func (this *<GLOBAL_NAME_PREFIX>RBTree) Find(d <GLOBAL_NAME_PREFIX>RBTreeNodeData) *<GLOBAL_NAME_PREFIX>RBTreeNode {
	return nil
}

