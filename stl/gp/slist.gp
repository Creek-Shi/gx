//#GOGP_IGNORE_BEGIN
///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Wed Nov 16 2016 22:56:13]
// Generate from:
//   [github.com/vipally/gx/stl/gp/slist.gp.go]
//   [github.com/vipally/gx/stl/gp/gp.gpg] [GOGP_REVERSE_slist]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : [Oct 24 2016 20:25:45]
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////
//#GOGP_IGNORE_END

<PACKAGE>

//#GOGP_REQUIRE(github.com/vipally/gx/stl/gp/fakedef,_)

//#GOGP_REQUIRE(github.com/vipally/gx/stl/gp/functorcmp)

var g<GLOBAL_NAME_PREFIX>SListGbl struct {
	cmp Cmp<GLOBAL_NAME_PREFIX>
}

func init() {
	g<GLOBAL_NAME_PREFIX>SListGbl.cmp = g<GLOBAL_NAME_PREFIX>SListGbl.cmp.CreateByName("#GOGP_GPGCFG(GOGP_DefaultCmpType)")
}

//list node
type <GLOBAL_NAME_PREFIX>SListNode struct {
	<VALUE_TYPE>
	next *<GLOBAL_NAME_PREFIX>SListNode
}

func (this *<GLOBAL_NAME_PREFIX>SListNode) Get() <VALUE_TYPE> {
	return this.<VALUE_TYPE>
}

func (this *<GLOBAL_NAME_PREFIX>SListNode) Set(v <VALUE_TYPE>) (old <VALUE_TYPE>) {
	old, this.<VALUE_TYPE> = this.<VALUE_TYPE>, v
	return
}

func (this *<GLOBAL_NAME_PREFIX>SListNode) Tail() (r *<GLOBAL_NAME_PREFIX>SListNode, size int) {
	if this != nil {
		for r, size = this, 1; r != nil && r.next != nil; r, size = r.next, size+1 { //do nothing body
		}
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>SListNode) Next() (r *<GLOBAL_NAME_PREFIX>SListNode) {
	if this != nil {
		r = this.next
	}
	return
}

//type GOGPTreeNamePrefixRBTreeNodeVisitor struct {
//	node, head *<GLOBAL_NAME_PREFIX>SListNode
//}

//func (this *GOGPTreeNamePrefixRBTreeNodeVisitor) Next() bool {
//	return false
//}

//func (this *GOGPTreeNamePrefixRBTreeNodeVisitor) Node() *<GLOBAL_NAME_PREFIX>SListNode {
//	return nil
//}

//single-way link list object
type GOGPListNamePrefixSList struct {
	head <GLOBAL_NAME_PREFIX>SListNode //head is a dummy node, not a pionter
	//#GOGP_IFDEF GOGP_HasTail
	tail *<GLOBAL_NAME_PREFIX>SListNode //
	//#GOGP_ENDIF

	//GOGP_HasTail
	//bug: ring?
}

//new object
func NewGOGPStackNamePrefixSList() *GOGPListNamePrefixSList {
	return &GOGPListNamePrefixSList{}
}

func (this *GOGPListNamePrefixSList) Len() int {
	return 0
}

//func (this *GOGPListNamePrefixSList) Visitor(node *<GLOBAL_NAME_PREFIX>SListNode) *GOGPTreeNamePrefixRBTreeNodeVisitor {
//	return nil
//}

func (this *GOGPListNamePrefixSList) Front() *<GLOBAL_NAME_PREFIX>SListNode {
	return this.head.next
}

//#GOGP_IFDEF GOGP_HasTail
func (this *GOGPListNamePrefixSList) Back() *<GLOBAL_NAME_PREFIX>SListNode {
	return this.tail
} //
//#GOGP_ENDIF

func (this *GOGPListNamePrefixSList) Clear() {
	this.head.next = nil
	//#GOGP_IFDEF GOGP_HasTail
	this.tail = nil //
	//#GOGP_ENDIF
}

func (this *GOGPListNamePrefixSList) PushFront(v <VALUE_TYPE>) *<GLOBAL_NAME_PREFIX>SListNode {
	n := &<GLOBAL_NAME_PREFIX>SListNode{<VALUE_TYPE>: v, next: this.head.next}
	this.head.next = n
	//#GOGP_IFDEF GOGP_HasTail
	if this.tail == nil {
		this.tail = n
	} //
	//#GOGP_ENDIF
	return n
}

//#GOGP_IFDEF GOGP_HasTail
func (this *GOGPListNamePrefixSList) PushBack(v <VALUE_TYPE>) *<GLOBAL_NAME_PREFIX>SListNode {
	n := &<GLOBAL_NAME_PREFIX>SListNode{<VALUE_TYPE>: v}
	if this.tail != nil {
		this.tail.next = n
	} else {
		this.head.next = n
	}
	this.tail = n
	return n
} //
//#GOGP_ENDIF

func (this *GOGPListNamePrefixSList) PushFrontList(other *GOGPListNamePrefixSList) {
	var t *<GLOBAL_NAME_PREFIX>SListNode
	//#GOGP_IFDEF GOGP_HasTail
	t = other.tail
	//#GOGP_ELSE
	t, _ = other.head.next.Tail()
	//#GOGP_ENDIF
	if t != nil {
		t.next = this.head.next
		this.head.next = other.head.next
		//#GOGP_IFDEF GOGP_HasTail
		if this.tail == nil {
			this.tail = t
		} //
		//#GOGP_ENDIF
	}
}

//#GOGP_IFDEF GOGP_HasTail
func (this *GOGPListNamePrefixSList) PushBackList(other *GOGPListNamePrefixSList) {
	if other.tail != nil {
		if this.tail != nil {
			this.tail.next = other.head.next
			this.tail = other.tail
		} else {
			this.head.next, this.tail = other.head.next, other.tail
		}
		other.Clear()
	}
} //
//#GOGP_ENDIF

//func (this *GOGPListNamePrefixSList) InsertBefore(v <VALUE_TYPE>, mark *<GLOBAL_NAME_PREFIX>SListNode) *<GLOBAL_NAME_PREFIX>SListNode {
//	return nil
//}

func (this *GOGPListNamePrefixSList) InsertAfter(v <VALUE_TYPE>, mark *<GLOBAL_NAME_PREFIX>SListNode) (n *<GLOBAL_NAME_PREFIX>SListNode) {
	if mark != nil {
		n = &<GLOBAL_NAME_PREFIX>SListNode{<VALUE_TYPE>: v, next: mark.next}
		mark.next = n
	}
	return
}

func (this *GOGPListNamePrefixSList) Remove(node *<GLOBAL_NAME_PREFIX>SListNode) (r *<GLOBAL_NAME_PREFIX>SListNode) {
	if node != nil {
		for b := &this.head; b != nil; b = b.next {
			if b.next == node {
				b.next = node.next
				r = node
				break
			}
		}
	}
	return
}

func (this *GOGPListNamePrefixSList) MoveFront(node *<GLOBAL_NAME_PREFIX>SListNode) (r *<GLOBAL_NAME_PREFIX>SListNode) {
	if node != nil {
		for b := this.head.next; b != nil; b = b.next {
			if b.next == node {
				b.next = node.next
				node.next = this.head.next
				this.head.next = node
				r = node
				//#GOGP_IFDEF GOGP_HasTail
				if this.tail == node {
					this.tail = b
				} //
				//#GOGP_ENDIF
				break
			}
		}
	}
	return
}

//#GOGP_IFDEF GOGP_HasTail
func (this *GOGPListNamePrefixSList) MoveBack(node *<GLOBAL_NAME_PREFIX>SListNode) (r *<GLOBAL_NAME_PREFIX>SListNode) {
	if node != nil && node.next != nil {
		for b := this.head.next; b != nil; b = b.next {
			if b.next == node {
				b.next = node.next
				node.next = nil
				this.tail.next = node
				this.tail = node
				r = node
				break
			}
		}
	}
	return
} //
//#GOGP_ENDIF

//func (this *GOGPListNamePrefixSList) MoveBefore(node, mark *<GLOBAL_NAME_PREFIX>SListNode) *<GLOBAL_NAME_PREFIX>SListNode {
//	return nil
//}

func (this *GOGPListNamePrefixSList) MoveAfter(node, mark *<GLOBAL_NAME_PREFIX>SListNode) (r *<GLOBAL_NAME_PREFIX>SListNode) {
	if node != nil && mark != nil && node != mark {
		for b := &this.head; b != nil; b = b.next { //bug:tail?
			if b.next == node {
				if b != mark {
					b.next = node.next
					node.next = mark.next
					mark.next = node
					r = node
					//#GOGP_IFDEF GOGP_HasTail
					if this.tail == node {
						this.tail = b
					} //
					//#GOGP_ENDIF
				}
				break
			}
		}
	}
	return
}

//merge sort
func (this *GOGPListNamePrefixSList) Sort() {
	head := this.head.next
	this.Clear()
	this.head.next = this.insertSort(head)
	//#GOGP_IFDEF GOGP_HasTail
	this.tail, _ = this.head.next.Tail() //
	//#GOGP_ENDIF
	return
}

func (this *GOGPListNamePrefixSList) mid(head *<GLOBAL_NAME_PREFIX>SListNode) *<GLOBAL_NAME_PREFIX>SListNode {
	if head == nil || head.next == nil {
		return head
	}
	slow := head
	for fast := head; fast != nil && fast.next != nil; fast, slow = fast.next.next, slow.next { //do nothing body
	}
	return slow
}

func (this *GOGPListNamePrefixSList) merge(a, b *<GLOBAL_NAME_PREFIX>SListNode) *<GLOBAL_NAME_PREFIX>SListNode {
	if a == nil {
		return b
	} else if b == nil {
		return a
	}
	var (
		head <GLOBAL_NAME_PREFIX>SListNode
		tail *<GLOBAL_NAME_PREFIX>SListNode
	)
	tail = &head
	for a != nil && b != nil {
		if g<GLOBAL_NAME_PREFIX>SListGbl.cmp.F(a.<VALUE_TYPE>, b.<VALUE_TYPE>) {
			tail.next = a
			tail = tail.next
			a = a.next
		} else {
			tail.next = b
			tail = tail.next
			b = b.next
		}
	}
	if a != nil {
		tail.next = a
		tail, _ = a.Tail()
	} else if b != nil {
		tail.next = b
		tail, _ = b.Tail()
	}
	tail.next = nil

	return head.next
}

func (this *GOGPListNamePrefixSList) mergeSort(head *<GLOBAL_NAME_PREFIX>SListNode) *<GLOBAL_NAME_PREFIX>SListNode {
	if head == nil || head.next == nil {
		return head
	} else if mid := this.mid(head); mid != nil {
		midNext := mid.next
		mid.next = nil
		return this.merge(this.mergeSort(mid), this.mergeSort(midNext))
	}
	return nil
}

func (this *GOGPListNamePrefixSList) PushOrderly(v <VALUE_TYPE>) *<GLOBAL_NAME_PREFIX>SListNode {
	n := &<GLOBAL_NAME_PREFIX>SListNode{<VALUE_TYPE>: v, next: nil}
	return this.InsertOrderly(n)
}

func (this *GOGPListNamePrefixSList) InsertOrderly(node *<GLOBAL_NAME_PREFIX>SListNode) *<GLOBAL_NAME_PREFIX>SListNode {
	p := &this.head
	for ; p.next != nil; p = p.next {
		if n := p.next; g<GLOBAL_NAME_PREFIX>SListGbl.cmp.F(node.<VALUE_TYPE>, n.<VALUE_TYPE>) {
			break
		}
	}
	node.next = p.next
	p.next = node
	//#GOGP_IFDEF GOGP_HasTail
	if this.tail == nil || this.tail == p {
		this.tail = node
	} //
	//#GOGP_ENDIF
	return node
}

func (this *GOGPListNamePrefixSList) insertSort(head *<GLOBAL_NAME_PREFIX>SListNode) *<GLOBAL_NAME_PREFIX>SListNode {
	if head == nil || head.next == nil {
		return head
	}

	var h GOGPListNamePrefixSList
	for p := head; p != nil; {
		q := p.next
		p.next = nil
		h.InsertOrderly(p)
		p = q
	}
	return h.head.next
}

