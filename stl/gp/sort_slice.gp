//#GOGP_IGNORE_BEGIN
///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Mon Oct 31 2016 23:52:23]
// Generate from:
//   [github.com/vipally/gx/stl/gp/sort_slice.go]
//   [github.com/vipally/gx/stl/gp/gp.gpg] [GOGP_REVERSE_sort_slice]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : [Oct 24 2016 20:25:45]
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////
//#GOGP_IGNORE_END

//this file define a template type for sort

<PACKAGE>

import "sort"

//#GOGP_REQUIRE(github.com/vipally/gx/stl/gp/fakedef,_)

//#GOGP_REQUIRE(github.com/vipally/gx/stl/gp/functorcmp)

func init() {
	g<GLOBAL_NAME_PREFIX>SortSliceGbl.cmp = g<GLOBAL_NAME_PREFIX>SortSliceGbl.cmp.CreateByName("#GOGP_GPGCFG(GOGP_DefaultCmpType)")
}

var g<GLOBAL_NAME_PREFIX>SortSliceGbl struct {
	cmp Cmp<GLOBAL_NAME_PART>
}

func New<GLOBAL_NAME_PREFIX>SortSlice(bigFirst bool) *<GLOBAL_NAME_PREFIX>SortSlice {
	p := &<GLOBAL_NAME_PREFIX>SortSlice{}
	p.Init(bigFirst)
	return p
}

//for sort
type <GLOBAL_NAME_PREFIX>SortSlice struct {
	cmp Cmp<GLOBAL_NAME_PART>
	d   []<VALUE_TYPE>
}

func (this *<GLOBAL_NAME_PREFIX>SortSlice) Init(bigFirst bool) {
	this.cmp = this.cmp.CreateByBool(bigFirst)
}

func (this *<GLOBAL_NAME_PREFIX>SortSlice) Sort() {
	sort.Sort(this)
}

//data
func (this *<GLOBAL_NAME_PREFIX>SortSlice) Slice() []<VALUE_TYPE> {
	return this.d
}

//push
func (this *<GLOBAL_NAME_PREFIX>SortSlice) Push(v <VALUE_TYPE>) int {
	this.d = append(this.d, v)
	return this.Len()
}

func (this *<GLOBAL_NAME_PREFIX>SortSlice) Pop() (r <VALUE_TYPE>) {
	if len(this.d) > 0 {
		r = (this.d)[len(this.d)-1]
	}
	this.d = (this.d)[:len(this.d)-1]
	return
}

//len
func (this *<GLOBAL_NAME_PREFIX>SortSlice) Len() int {
	return len(this.Slice())
}

//sort by Hash decend,the larger one first
func (this *<GLOBAL_NAME_PREFIX>SortSlice) Less(i, j int) (ok bool) {
	l, r := (this.d)[i], (this.d)[j]
	return this.cmp.F(l, r)
}

//swap
func (this *<GLOBAL_NAME_PREFIX>SortSlice) Swap(i, j int) {
	(this.d)[i], (this.d)[j] = (this.d)[j], (this.d)[i]
}

