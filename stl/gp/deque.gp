//GOGP_IGNORE_BEGIN
///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Tue Oct 18 2016 22:36:40]
// Generate from:
//   [github.com/vipally/gx/stl/gp/deque.go]
//   [github.com/vipally/gx/stl/gp/gp.gpg] [GOGP_REVERSE_deque]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : [Oct  6 2016 14:25:07]
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////
//GOGP_IGNORE_END

<PACKAGE>

//#if GOGP_Show
import show_bytes "bytes" //#endif

//deque object
type <DEQUE_NAME_PREFIX>Deque struct {
	//real data is [head,tail)
	//buffer d is cycle, that is to say, next(len(d)-1)=0, prev(0)=len(d)-1
	//so if tail<head, data is [head, end, 0, tail)
	//head point to the first elem  aviable for read
	//tail point to the first space aviable for write
	head int
	tail int
	d    []<DEQUE_ELEM>
}

//new object
func New<DEQUE_NAME_PREFIX>Deque(bufSize int) *<DEQUE_NAME_PREFIX>Deque {
	r := &<DEQUE_NAME_PREFIX>Deque{}
	r.Init(bufSize)
	return r
}

//init
func (this *<DEQUE_NAME_PREFIX>Deque) Init(bufSize int) {
	if nil == this.d {
		if bufSize <= 0 {
			bufSize = 8 //default buffer size
		}
		this.newBuf(bufSize)
	}
	this.Clear()
	return
}

//create new buffer
func (this *<DEQUE_NAME_PREFIX>Deque) newBuf(bufSize int) {
	if bufSize > 0 {
		this.d = make([]<DEQUE_ELEM>, bufSize, bufSize) //the same cap and len
	}
}

//clear all deque data
func (this *<DEQUE_NAME_PREFIX>Deque) Clear() {
	this.head, this.tail = 0, 0
}

//push to front of deque
func (this *<DEQUE_NAME_PREFIX>Deque) PushFront(v <DEQUE_ELEM>) (ok bool) {
	if ok = true; ok {
		if nil == this.d { //init if needed
			this.Init(-1)
		}

		if this.head--; this.head < 0 { //move head to prev empty space
			this.head = this.Cap() - 1
		}
		this.d[this.head] = v
		if this.head == this.tail { //head reaches tail, buffer full
			oldCap := this.Cap()
			d := this.d
			this.newBuf(oldCap * 2)
			h := copy(this.d, d[this.head:])
			t := copy(this.d[:h], d[:this.tail])
			this.head, this.tail = 0, h+t
		}
	}
	return
}

//push to back of deque
func (this *<DEQUE_NAME_PREFIX>Deque) PushBack(v <DEQUE_ELEM>) (ok bool) {
	if ok = true; ok {
		if nil == this.d { //init if needed
			this.Init(-1)
		}
		this.d[this.tail] = v
		if this.tail++; this.tail >= this.Cap() {
			this.tail = 0
			if this.tail == this.head { //tail catches up head, buffer full
				oldCap := this.Cap()
				d := this.d
				this.newBuf(oldCap * 2)
				h := copy(this.d, d[this.head:])
				t := copy(this.d[:h], d[:this.tail])
				this.head, this.tail = 0, h+t
			}
		}
	}
	return
}

//pop front of deque
func (this *<DEQUE_NAME_PREFIX>Deque) PopFront() (front <DEQUE_ELEM>, ok bool) {
	if ok = this.head != this.tail; ok {
		front = this.d[this.head]
		if this.head++; this.head >= this.Cap() {
			this.head = 0
		}
	}
	return
}

//pop back of deque
func (this *<DEQUE_NAME_PREFIX>Deque) PopBack() (back <DEQUE_ELEM>, ok bool) {
	if ok = this.head != this.tail; ok {
		if this.tail--; this.tail < 0 {
			this.tail = this.Cap() - 1
		}
		back = this.d[this.tail]
	}
	return
}

//front data
func (this *<DEQUE_NAME_PREFIX>Deque) Front() (front <DEQUE_ELEM>, ok bool) {
	if ok = this.head != this.tail; ok {
		front = this.d[this.head]
	}
	return
}

//back data
func (this *<DEQUE_NAME_PREFIX>Deque) Back() (back <DEQUE_ELEM>, ok bool) {
	if ok = this.head != this.tail; ok {
		t := this.tail - 1
		if t < 0 {
			t = this.Cap() - 1
		}
		back = this.d[t]
	}
	return
}

//shrink data buffer if necessary
func (this *<DEQUE_NAME_PREFIX>Deque) Shrink() (ok bool) {
	oldCap := this.Cap()
	oldSize := this.Size()
	if ok := oldCap > 8 && oldCap >= 3*oldSize; ok { //leave at least 8 elem space
		d := this.d
		this.newBuf(oldSize / 2)
		if this.tail >= this.head {
			copy(this.d, d[this.head:this.tail])
			this.tail -= this.head
			this.head = 0
		} else {
			h := copy(this.d, d[this.head:])
			t := copy(this.d[:h], d[:this.tail])
			this.head, this.tail = 0, h+t
		}
	}
	return
}

//func (this *<DEQUE_NAME_PREFIX>Deque) Sort() {}

//data buffer size
func (this *<DEQUE_NAME_PREFIX>Deque) Cap() int {
	return len(this.d)
}

//size of deque
func (this *<DEQUE_NAME_PREFIX>Deque) Size() (size int) {
	if this.tail >= this.head {
		size = this.tail - this.head
	} else {
		size = this.Cap() - this.head + this.tail
	}
	return
}

//if deque is empty
func (this *<DEQUE_NAME_PREFIX>Deque) Empty() bool {
	return this.Size() == 0
}

//#if GOGP_Show
//show
func (this *<DEQUE_NAME_PREFIX>Deque) Show() string {
	var b show_bytes.Buffer
	b.WriteByte('[')
	for i := this.head; i != this.tail; i++ {
		if i >= this.Cap() {
			i = 0
		}
		v := this.d[i]
		b.WriteString(v.Show())
		b.WriteByte(',')
	}
	if this.Size() > 0 {
		b.Truncate(b.Len() - 1) //remove last ','
	}
	b.WriteByte(']')
	return b.String()
} //#endif //GOGP_Show

